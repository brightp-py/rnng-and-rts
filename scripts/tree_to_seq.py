"""
tree_to_seq.py.

Take a file of syntax trees as generated by Noji and Oseki's RNNG code and
convert it into a series of simple sentences.

Expected input:
{"orig_tokens": ["The", "boy", ...], ..., "key": "sentence"}
{"orig_tokens": ["I", "can", ...], ..., "key": "sentence"}
{"orig_tokens": ["If", "you", ...], ..., "key": "sentence"}
...
{"orig_tokens": ["And", ",", ...], ..., "key": "sentence"}
...

Resulting output:
The boy ... <eos>
I can ... <eos>
If you ... <eos>
...
And , ... <eos>

Brighton Pauli
"""
import argparse

import json

parser = argparse.ArgumentParser()

# Data path options
parser.add_argument('--ptb_file', default='D:/data/naturalstories/ptb/raw.txt')
parser.add_argument('--save_file', default='')


def read_jsonl(filename):
    """Load the given file and yield any jsonl lines with the key "sentence".

    The jsonl format consists of multiple json items (one per line). Each has
    a "key" value which is used to identify which kind of data it contains.

    We want to only extract the dictionaries with the "sentence" key and yield
    them.
    """
    with open(filename, 'r', encoding='utf-8') as file:
        for line in file:
            data = json.loads(line)
            if data['key'] == "sentence":
                yield data


def main(args):
    """Load trees from the given tree file and save sentence results.
    
    ptb_file is a jsonl file, with the format described at the top of the
    module. Any rows with the "sentence" key will be extracted.
    """
    text = []
    for tree in read_jsonl(args.ptb_file):
        text.append(' '.join(tree['orig_tokens']) + " <eos>")
    with open(args.save_file, 'w', encoding='utf-8') as file:
        file.write('\n'.join(text))


if __name__ == "__main__":
    arguments = parser.parse_args()
    main(arguments)
